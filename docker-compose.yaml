version: '3.8'

services:
  app:
    build: 
      context: ./backend/
      dockerfile: Dockerfile
    container_name: tecktrack-app
    environment:
      DB_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB:-appdb}
      DB_USERNAME: ${POSTGRES_USER:-admin}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-secret}
      MONGO_URI: mongodb://appuser:apppassword@mongo:27017/techTrackInvestMongo?authSource=admin
      EMAIL_PASS: begy rvvu yxei myxw
    ports:
      - "8080:8080"
    networks:
      - db-network
    depends_on:
      postgres:
        condition: service_healthy
      mongo:
        condition: service_healthy
    restart: on-failure

  postgres:
    image: postgres:17-alpine
    container_name: postgres_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secret}
      POSTGRES_DB: ${POSTGRES_DB:-appdb}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - db-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  mongo:
    image: mongo:latest
    container_name: mongo_db
    environment:
      MONGO_INITDB_DATABASE: techTrackInvestMongo
    volumes:
      - mongo_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    ports:
      - "27017:27017"
    networks:
      - db-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  mongo_data:

networks:
  db-network:
    driver: bridge